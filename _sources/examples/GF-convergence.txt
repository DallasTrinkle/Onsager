{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convergence of Green function calculation\n",
    "We check the convergence with $N_\\text{kpt}$ for the calculation of the vacancy Green function for FCC and HCP structures. In particular, we will look at:\n",
    "\n",
    "1. The $\\mathbf{R}=0$ value,\n",
    "2. The largest $\\mathbf{R}$ value in the calculation of a first neighbor thermodynamic interaction range,\n",
    "3. The difference of the Green function value for (1) and (2),\n",
    "\n",
    "with increasing k-point density."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.extend(['../'])\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "%matplotlib inline\n",
    "import onsager.crystal as crystal\n",
    "import onsager.GFcalc as GFcalc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create an FCC and HCP lattice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#Lattice:\n",
      "  a1 = [ 0.   0.5  0.5]\n",
      "  a2 = [ 0.5  0.   0.5]\n",
      "  a3 = [ 0.5  0.5  0. ]\n",
      "#Basis:\n",
      "  (fcc) 0.0 = [ 0.  0.  0.]\n",
      "#Lattice:\n",
      "  a1 = [ 0.5       -0.8660254  0.       ]\n",
      "  a2 = [ 0.5        0.8660254  0.       ]\n",
      "  a3 = [ 0.          0.          1.63299316]\n",
      "#Basis:\n",
      "  (hcp) 0.0 = [ 0.33333333  0.66666667  0.25      ]\n",
      "  (hcp) 0.1 = [ 0.66666667  0.33333333  0.75      ]\n"
     ]
    }
   ],
   "source": [
    "a0 = 1.\n",
    "FCC, HCP = crystal.Crystal.FCC(a0, \"fcc\"), crystal.Crystal.HCP(a0, chemistry=\"hcp\")\n",
    "print(FCC)\n",
    "print(HCP)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will put together our vectors for consideration:\n",
    "\n",
    "* Maximum $\\mathbf{R}$ for FCC = (400), or $\\mathbf{x}=2\\hat j+2\\hat k$.\n",
    "* Maximum $\\mathbf{R}$ for HCP = (440), or $\\mathbf{x}=4\\hat i$, and (222), or $\\mathbf{x}=2\\hat i + 2\\sqrt{8/3}\\hat k$.\n",
    "\n",
    "and our sitelists and jumpnetworks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "FCCR = np.array([0,2.,2.])\n",
    "HCPR1, HCPR2 = np.array([4.,0.,0.]), np.array([2.,0.,2*np.sqrt(8/3)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "FCCsite, FCCjn = FCC.sitelist(0), FCC.jumpnetwork(0, 0.75)\n",
    "HCPsite, HCPjn = HCP.sitelist(0), HCP.jumpnetwork(0, 1.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use $N_\\text{max}$ parameter, which controls the automated generation of k-points to iterate through successively denser k-point meshes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kpt\tNkpt\tG(0)\tG(R)\tG diff\n",
      "6x6x6\t   216 (16)\t-1.344901582401\t-0.119888361621\t-1.225013220779\n",
      "10x10x10\t  1000 (48)\t-1.344674624975\t-0.084566077531\t-1.260108547444\n",
      "14x14x14\t  2744 (106)\t-1.344663672542\t-0.084541308263\t-1.260122364278\n",
      "18x18x18\t  5832 (201)\t-1.344661890661\t-0.084539383601\t-1.260122507061\n",
      "22x22x22\t 10648 (341)\t-1.344661442403\t-0.084538941208\t-1.260122501195\n",
      "26x26x26\t 17576 (528)\t-1.344661295590\t-0.084538798573\t-1.260122497018\n",
      "30x30x30\t 27000 (777)\t-1.344661238153\t-0.084538742761\t-1.260122495392\n",
      "34x34x34\t 39304 (1094)\t-1.344661212587\t-0.084538717850\t-1.260122494737\n",
      "38x38x38\t 54872 (1488)\t-1.344661200054\t-0.084538705591\t-1.260122494464\n",
      "42x42x42\t 74088 (1971)\t-1.344661193423\t-0.084538699082\t-1.260122494341\n",
      "46x46x46\t 97336 (2547)\t-1.344661189691\t-0.084538695410\t-1.260122494281\n",
      "50x50x50\t 125000 (3222)\t-1.344661187483\t-0.084538693232\t-1.260122494251\n"
     ]
    }
   ],
   "source": [
    "FCCdata = {pmaxerror:[] for pmaxerror in range(-16,0)}\n",
    "print('kpt\\tNkpt\\tG(0)\\tG(R)\\tG diff')\n",
    "for Nmax in range(1,13):\n",
    "    GFFCC = GFcalc.GFCrystalcalc(FCC, 0, FCCsite, FCCjn, Nmax=Nmax)\n",
    "    Nreduce, Nkpt, kpt = GFFCC.Nkpt, np.prod(GFFCC.kptgrid), GFFCC.kptgrid\n",
    "    for pmax in sorted(FCCdata.keys(), reverse=True):\n",
    "        GFFCC.SetRates(np.ones(1), np.zeros(1), np.ones(1)/12, np.zeros(1), 10**(pmax))\n",
    "        g0,gR = GFFCC(0,0,np.zeros(3)), GFFCC(0,0,FCCR)\n",
    "        FCCdata[pmax].append((Nkpt, g0, gR))\n",
    "    Nkpt,g0,gR = FCCdata[-8][-1]  # print the 10^-8 values\n",
    "    print(\"{k[0]}x{k[1]}x{k[2]}\\t\".format(k=kpt) + \n",
    "          \" {:5d} ({})\\t{:.12f}\\t{:.12f}\\t{:.12f}\".format(Nkpt, Nreduce, \n",
    "                                                               g0, gR,g0-gR))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kpt\tNkpt\tG(0)\tG(R1)\tG(R2)\tG(R1)-G(0)\tG(R2)-G0\n",
      "6x6x4\t  144 (21)\t-1.367909503563\t-0.192892722514\t-0.131552967388\t-1.175016781049\t-1.236356536175\n",
      "10x10x6\t  600 (56)\t-1.345034474341\t-0.087913619020\t-0.089866654871\t-1.257120855321\t-1.255167819470\n",
      "16x16x8\t 2048 (150)\t-1.344668575390\t-0.084546609595\t-0.088212957806\t-1.260121965795\t-1.256455617584\n",
      "20x20x12\t 4800 (308)\t-1.344662392185\t-0.084539941251\t-0.088166498574\t-1.260122450934\t-1.256495893611\n",
      "26x26x14\t 9464 (560)\t-1.344661615456\t-0.084539088966\t-0.088165768509\t-1.260122526490\t-1.256495846946\n",
      "30x30x16\t14400 (819)\t-1.344661401027\t-0.084538892419\t-0.088165529659\t-1.260122508608\t-1.256495871368\n",
      "36x36x20\t25920 (1397)\t-1.344661260564\t-0.084538764009\t-0.088165374312\t-1.260122496555\t-1.256495886252\n",
      "40x40x22\t35200 (1848)\t-1.344661230214\t-0.084538734661\t-0.088165342770\t-1.260122495553\t-1.256495887444\n",
      "46x46x24\t50784 (2600)\t-1.344661210808\t-0.084538715598\t-0.088165322977\t-1.260122495211\t-1.256495887832\n",
      "50x50x28\t70000 (3510)\t-1.344661197817\t-0.084538703416\t-0.088165309065\t-1.260122494400\t-1.256495888752\n",
      "56x56x30\t94080 (4640)\t-1.344661192649\t-0.084538698279\t-0.088165303871\t-1.260122494370\t-1.256495888778\n",
      "60x60x32\t115200 (5627)\t-1.344661189980\t-0.084538695678\t-0.088165301128\t-1.260122494302\t-1.256495888852\n"
     ]
    }
   ],
   "source": [
    "HCPdata = []\n",
    "print('kpt\\tNkpt\\tG(0)\\tG(R1)\\tG(R2)\\tG(R1)-G(0)\\tG(R2)-G0')\n",
    "for Nmax in range(1,13):\n",
    "    GFHCP = GFcalc.GFCrystalcalc(HCP, 0, HCPsite, HCPjn, Nmax=Nmax)\n",
    "    GFHCP.SetRates(np.ones(1), np.zeros(1), np.ones(2)/12, np.zeros(2), 1e-8)\n",
    "    g0,gR1,gR2 = GFHCP(0,0,np.zeros(3)), GFHCP(0,0,HCPR1), GFHCP(0,0,HCPR2)\n",
    "    Nreduce, Nkpt, kpt = GFHCP.Nkpt, np.prod(GFHCP.kptgrid), GFHCP.kptgrid\n",
    "    HCPdata.append((Nkpt, g0, gR1, gR2))\n",
    "    print(\"{k[0]}x{k[1]}x{k[2]}\\t\".format(k=kpt) + \n",
    "          \"{:5d} ({})\\t{:.12f}\\t{:.12f}\\t{:.12f}\\t{:.12f}\\t{:.12f}\".format(Nkpt, Nreduce,\n",
    "                                                                                  g0, gR1, gR2, \n",
    "                                                                                  g0-gR1, g0-gR2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, look at the behavior of the error with $p_\\text{max}$(error) parameter. The k-point integration error scales as $N_\\text{kpt}^{5/3}$, and we see the $p_\\text{max}$ error is approximately $10^{-8}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pmax\tGinf\talpha (Nkpt^-5/3 prefactor)\n",
      "-1\t-1.3622381890789426\t126.67614232856941\n",
      "-2\t-1.345225234069008\t16.789604252572925\n",
      "-3\t-1.3446883609506095\t2.5257576431627555\n",
      "-4\t-1.344662783896984\t1.0989787093928518\n",
      "-5\t-1.3446612897581471\t1.0453810565295385\n",
      "-6\t-1.3446611908377897\t1.1366972814517313\n",
      "-7\t-1.3446611836378024\t1.2545915973689081\n",
      "-8\t-1.3446611828712731\t1.4038756579806484\n",
      "-9\t-1.344661182337632\t1.608186921165577\n",
      "-10\t-1.3446611814380418\t1.8951448537999165\n",
      "-11\t-1.344661180005655\t2.291135980573609\n",
      "-12\t-1.3446611779274202\t2.8185182806123508\n",
      "-13\t-1.3446611751184294\t3.4945030859983652\n",
      "-14\t-1.3446611715189616\t4.331229854988949\n",
      "-15\t-1.3446611670905142\t5.336529960337354\n",
      "-16\t-1.3446611618106175\t6.514974709092111\n"
     ]
    }
   ],
   "source": [
    "print('pmax\\tGinf\\talpha (Nkpt^-5/3 prefactor)')\n",
    "Ginflist=[]\n",
    "for pmax in sorted(FCCdata.keys(), reverse=True):\n",
    "    data = FCCdata[pmax]\n",
    "    Nk53 = np.array([N**(5/3) for (N,g0,gR) in data])\n",
    "    gval = np.array([g0 for (N,g0,gR) in data])\n",
    "    N10,N5 = np.average(Nk53*Nk53),np.average(Nk53)\n",
    "    g10,g5 = np.average(gval*Nk53*Nk53),np.average(gval*Nk53)\n",
    "    denom = N10-N5**2\n",
    "    Ginf,alpha = (g10-g5*N5)/denom, (g10*N5-g5*N10)/denom\n",
    "    Ginflist.append(Ginf)\n",
    "    print('{}\\t{}\\t{}'.format(pmax, Ginf, alpha))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the error in the Green function for FCC (at 0, maximum R, and difference between those GF). We extract the infinite value by fitting the error to $N_{\\mathrm{kpt}}^{-5/3}$, which empirically matches the numerical error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10f22f240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the errors from pmax = 10^-8\n",
    "data = FCCdata[-8]\n",
    "Nk = np.array([N for (N,g0,gR) in data])\n",
    "g0val = np.array([g0 for (N,g0,gR) in data])\n",
    "gRval = np.array([gR for (N,g0,gR) in data])\n",
    "\n",
    "gplot = []\n",
    "Nk53 = np.array([N**(5/3) for (N,g0,gR) in data])\n",
    "for gdata, start in zip((g0val, gRval, g0val-gRval), (0,1,2)):\n",
    "    N10,N5 = np.average(Nk53[start:]*Nk53[start:]),np.average(Nk53[start:])\n",
    "    denom = N10-N5**2\n",
    "    g10 = np.average(gdata[start:]*Nk53[start:]*Nk53[start:])\n",
    "    g5 = np.average(gdata[start:]*Nk53[start:])\n",
    "    Ginf,alpha = (g10-g5*N5)/denom, (g10*N5-g5*N10)/denom\n",
    "    gplot.append(np.abs(gdata-Ginf))\n",
    "\n",
    "fig, ax1 = plt.subplots()\n",
    "ax1.plot(Nk, gplot[0], 'k', label='$G(\\mathbf{0})$ error $\\sim N_{\\mathrm{kpt}}^{-5/3}$')\n",
    "ax1.plot(Nk, gplot[1], 'r', label='$G(\\mathbf{R})$ error $\\sim N_{\\mathrm{kpt}}^{-5/3}$')\n",
    "ax1.plot(Nk, gplot[2], 'b', label='$G(\\mathbf{0})-G(\\mathbf{R})$ error')\n",
    "ax1.set_xlim((1e2,2e5))\n",
    "ax1.set_ylim((1e-11,1))\n",
    "ax1.set_xscale('log')\n",
    "ax1.set_yscale('log')\n",
    "ax1.set_xlabel('$N_{\\mathrm{kpt}}$', fontsize='x-large')\n",
    "ax1.set_ylabel('integration error $G-G^\\infty$', fontsize='x-large')\n",
    "ax1.legend(bbox_to_anchor=(0.6,0.6,0.4,0.4), ncol=1, \n",
    "           shadow=True, frameon=True, fontsize='x-large')\n",
    "ax2 = ax1.twiny()\n",
    "ax2.set_xscale('log')\n",
    "ax2.set_xlim(ax1.get_xlim())\n",
    "ax2.set_xticks([n for n in Nk])\n",
    "ax2.set_xticklabels([\"${:.0f}^3$\".format(n**(1/3)) for n in Nk])\n",
    "ax2.set_xlabel('k-point grid', fontsize='x-large')\n",
    "ax2.grid(False)\n",
    "ax2.tick_params(axis='x', top='on', direction='in', length=6)\n",
    "plt.show()\n",
    "# plt.savefig('FCC-GFerror.pdf', transparent=True, format='pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot the error in Green function for HCP."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110118048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot the errors from pmax = 10^-8\n",
    "data = HCPdata\n",
    "Nk = np.array([N for (N,g0,gR1,gR2) in data])\n",
    "g0val = np.array([g0 for (N,g0,gR1,gR2) in data])\n",
    "gR1val = np.array([gR1 for (N,g0,gR1,gR2) in data])\n",
    "gR2val = np.array([gR2 for (N,g0,gR1,gR2) in data])\n",
    "\n",
    "gplot = []\n",
    "Nk53 = np.array([N**(5/3) for (N,g0,gR1,gR2) in data])\n",
    "for gdata, start in zip((g0val, gR1val, gR2val, g0val-gR1val, g0val-gR2val), (3,3,3,3,3)):\n",
    "    N10,N5 = np.average(Nk53[start:]*Nk53[start:]),np.average(Nk53[start:])\n",
    "    denom = N10-N5**2\n",
    "    g10 = np.average(gdata[start:]*Nk53[start:]*Nk53[start:])\n",
    "    g5 = np.average(gdata[start:]*Nk53[start:])\n",
    "    Ginf,alpha = (g10-g5*N5)/denom, (g10*N5-g5*N10)/denom\n",
    "    gplot.append(np.abs(gdata-Ginf))\n",
    "\n",
    "fig, ax1 = plt.subplots()\n",
    "ax1.plot(Nk, gplot[0], 'k', label='$G(\\mathbf{0})$ error')\n",
    "ax1.plot(Nk, gplot[1], 'r', label='$G(\\mathbf{R}_1)$ error')\n",
    "ax1.plot(Nk, gplot[2], 'r--', label='$G(\\mathbf{R}_2)$ error')\n",
    "ax1.plot(Nk, gplot[3], 'b', label='$G(\\mathbf{0})-G(\\mathbf{R}_1)$ error')\n",
    "ax1.plot(Nk, gplot[4], 'b--', label='$G(\\mathbf{0})-G(\\mathbf{R}_2)$ error')\n",
    "ax1.set_xlim((1e2,2e5))\n",
    "ax1.set_ylim((1e-11,1))\n",
    "ax1.set_xscale('log')\n",
    "ax1.set_yscale('log')\n",
    "ax1.set_xlabel('$N_{\\mathrm{kpt}}$', fontsize='x-large')\n",
    "ax1.set_ylabel('integration error $G-G^\\infty$', fontsize='x-large')\n",
    "ax1.legend(bbox_to_anchor=(0.6,0.6,0.4,0.4), ncol=1, \n",
    "           shadow=True, frameon=True, fontsize='medium')\n",
    "ax2 = ax1.twiny()\n",
    "ax2.set_xscale('log')\n",
    "ax2.set_xlim(ax1.get_xlim())\n",
    "ax2.set_xticks([n for n in Nk])\n",
    "# ax2.set_xticklabels([\"${:.0f}$\".format((n*1.875)**(1/3)) for n in Nk])\n",
    "ax2.set_xticklabels(['6','10','16','20','26','30','36','40','46','50','56','60'])\n",
    "ax2.set_xlabel('k-point divisions (basal)', fontsize='x-large')\n",
    "ax2.grid(False)\n",
    "ax2.tick_params(axis='x', top='on', direction='in', length=6)\n",
    "plt.show()\n",
    "# plt.savefig('HCP-GFerror.pdf', transparent=True, format='pdf')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
