# Input format for a crystal, followed by sitelist and jumpnetwork.
# Notes:
# 1. !numpy.ndarray tag is used to specifically identify numpy arrays;
#    should be used for both the lattice and basis entries
# 2. lattice is in a more "readable" format using *row* vectors; the
#    actual Crystal object stores the lattice with *column* vectors,
#    so after import, this matrix will be transposed.
# 3. lattice_constant is optional; it is used to scale lattice on input.
# 4. the basis is a list of lists; the lists are broken up in terms
#    of chemistry (see the chemistry list)
# 5. chemistry is a list of names of the unique species in the crystal;
#    it is entirely optional, and not used to construct the crystal object
# 6. the sitelist and jumpnetwork have entries for energies, elastic dipoles
#    and prefactors; each are for the *first element in the lists* as a
#    representative.
# 7. the tag interstitial defines which site is the interstitial element.
# NOTE: we removed (by hand) the extra o->t transition that crossed the basal plane
# and also rearranged the site list so that it's oct first, then tet
interstitial: 1
lattice_constant: 3.0
lattice: !numpy.ndarray
- [0.5, -0.8660254037844387, 0.0]
- [0.5, 0.8660254037844387, 0.0]
- [0.0, 0.0, 1.6329931618554518]
basis:
- - !numpy.ndarray [0.3333333333333333, 0.6666666666666666, 0.25]
  - !numpy.ndarray [0.6666666666666666, 0.3333333333333333, 0.75]
- - !numpy.ndarray [0.0, 0.0, 0.0]
  - !numpy.ndarray [0.0, 0.0, 0.5]
  - !numpy.ndarray [0.3333333333333333, 0.6666666666666666, 0.625]
  - !numpy.ndarray [0.3333333333333333, 0.6666666666666666, 0.875]
  - !numpy.ndarray [0.6666666666666666, 0.3333333333333333, 0.125]
  - !numpy.ndarray [0.6666666666666666, 0.3333333333333333, 0.375]
chemistry:
- Mg
- O
# oct first, then tet
sitelist:
- [0, 1]
- [2, 3, 4, 5]
Energy: [0, 1]
Prefactor: [1, 1]
Dipole:
- !numpy.ndarray
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
- !numpy.ndarray
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
# o-o (along c), o-t, t-t (along c)
# remember: these are the values for the TRANSITION STATES
EnergyT: [3, 1.5, 1.25]
PrefactorT: [1, 1, 1]
DipoleT:
- !numpy.ndarray
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
- !numpy.ndarray
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
- !numpy.ndarray
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
  - [0.0, 0.0, 0.0]
jumpnetwork:
- - !!python/tuple
    - !!python/tuple [0, 1]
    - !numpy.ndarray [0.0, 0.0, 2.449489742783178]
  - !!python/tuple
    - !!python/tuple [1, 0]
    - !numpy.ndarray [-0.0, -0.0, -2.449489742783178]
  - !!python/tuple
    - !!python/tuple [0, 1]
    - !numpy.ndarray [0.0, 0.0, -2.449489742783178]
  - !!python/tuple
    - !!python/tuple [1, 0]
    - !numpy.ndarray [-0.0, -0.0, 2.449489742783178]
- - !!python/tuple
    - !!python/tuple [0, 4]
    - !numpy.ndarray [0.0, 1.7320508075688774, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [4, 0]
    - !numpy.ndarray [-0.0, -1.7320508075688774, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [0, 3]
    - !numpy.ndarray [0.0, -1.7320508075688774, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [3, 0]
    - !numpy.ndarray [-0.0, 1.7320508075688774, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [1, 2]
    - !numpy.ndarray [-1.5, 0.8660254037844388, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [2, 1]
    - !numpy.ndarray [1.5, -0.8660254037844388, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [1, 2]
    - !numpy.ndarray [1.5, 0.8660254037844386, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [2, 1]
    - !numpy.ndarray [-1.5, -0.8660254037844386, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [1, 5]
    - !numpy.ndarray [-1.5, -0.8660254037844388, -0.6123724356957947]
  - !!python/tuple
    - !!python/tuple [5, 1]
    - !numpy.ndarray [1.5, 0.8660254037844388, 0.6123724356957947]
  - !!python/tuple
    - !!python/tuple [1, 5]
    - !numpy.ndarray [1.5, -0.8660254037844386, -0.6123724356957947]
  - !!python/tuple
    - !!python/tuple [5, 1]
    - !numpy.ndarray [-1.5, 0.8660254037844386, 0.6123724356957947]
  - !!python/tuple
    - !!python/tuple [1, 2]
    - !numpy.ndarray [0.0, -1.7320508075688774, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [2, 1]
    - !numpy.ndarray [-0.0, 1.7320508075688774, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [0, 4]
    - !numpy.ndarray [-1.5, -0.8660254037844388, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [4, 0]
    - !numpy.ndarray [1.5, 0.8660254037844388, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [0, 4]
    - !numpy.ndarray [1.5, -0.8660254037844386, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [4, 0]
    - !numpy.ndarray [-1.5, 0.8660254037844386, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [0, 3]
    - !numpy.ndarray [1.5, 0.8660254037844386, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [3, 0]
    - !numpy.ndarray [-1.5, -0.8660254037844386, 0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [1, 5]
    - !numpy.ndarray [0.0, 1.7320508075688774, -0.6123724356957947]
  - !!python/tuple
    - !!python/tuple [5, 1]
    - !numpy.ndarray [-0.0, -1.7320508075688774, 0.6123724356957947]
  - !!python/tuple
    - !!python/tuple [0, 3]
    - !numpy.ndarray [-1.5, 0.8660254037844388, -0.6123724356957945]
  - !!python/tuple
    - !!python/tuple [3, 0]
    - !numpy.ndarray [1.5, -0.8660254037844388, 0.6123724356957945]
- - !!python/tuple
    - !!python/tuple [5, 4]
    - !numpy.ndarray [0.0, 0.0, -1.2247448713915885]
  - !!python/tuple
    - !!python/tuple [4, 5]
    - !numpy.ndarray [-0.0, -0.0, 1.2247448713915885]
  - !!python/tuple
    - !!python/tuple [2, 3]
    - !numpy.ndarray [0.0, 0.0, 1.2247448713915885]
  - !!python/tuple
    - !!python/tuple [3, 2]
    - !numpy.ndarray [-0.0, -0.0, -1.2247448713915885]
